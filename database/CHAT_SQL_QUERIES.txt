CREATE DATABASE CHAT;

CREATE TABLE user_info
(
    id int PRIMARY KEY AUTO_INCREMENT,
    username varchar(20),
    password varchar(64),
    salt varchar(32),
    firstname varchar(50),
    lastname varchar(50),
    joined TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_type int
)

CREATE TABLE user_type
(
    id int PRIMARY KEY AUTO_INCREMENT,
    type_name varchar(30),
    type TEXT
)

CREATE Table users_session
(
    id 	INT PRIMARY KEY AUTO_INCREMENT,
    user_id int,
    hash varchar(50)
)

CREATE TABLE post_visibility
(
    id int PRIMARY KEY AUTO_INCREMENT,
    visibility varchar(40)
);

CREATE TABLE Post
(
    id int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    post_owner int NOT NULL REFERENCES user_info(id),
    post_visibility int NOT NULL REFERENCES post_visibility(id),
    post_date timestamp DEFAULT CURRENT_TIMESTAMP,
    post_edit_date timestamp DEFAULT CURRENT_TIMESTAMP,
    text_content TEXT,
    picture_media TEXT,
    video_media TEXT
);

CREATE TABLE post_place
(
    id int PRIMARY KEY AUTO_INCREMENT,
    post_place varchar(40)
);

// THE ADDED TABLE TO IMPLEMENT FOLLOW SYSTEM
CREATE TABLE IF NOT EXISTS `user_follow` (
  `id` int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,
  `follower_id` int(11) NOT NULL REFERENCES user_info(id),
  `followed_id` int(11) NOT NULL REFERENCES user_info(id),
  UNIQUE KEY `follow_unique` (`follower_id`,`followed_id`)
);

CREATE TABLE user_relation
(
    `from` int NOT NULL REFERENCES user_info(id),
    `to` int NOT NULL REFERENCES user_info(id),
    `status` varchar(1),
    `since` timestamp DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY `UNIQUE_RELATION` (`from`,`to`, `status`)
);

/*
    IMPORTANT: we crate message table to only store the message and the sender user,but regarding the recipient of the message
    we create another table message_recipient to store the message received by some specific user and we can also know the 
    sender from recipient table by tracking the message_id table and see the message creator from there using joins
    Exemple: if user with id: 5 sends a message to user with id: 7 we insert a row to message (5, 'Hello there !')
    and insert row into recipient (7, 1, FALSE) asuming that 1 is the message's id
    Now of course we need someway to get the id of message, like when we insert a message into the database we return its id
    Notice: When a user decide to delete a message, in case the sender want to delete a message he just make message creator NULL
    and if the case of user is recipient we delete the recipient row (receiver_id + message_id should be unique in that case)
*/

CREATE TABLE message
(
    id int PRIMARY KEY AUTO_INCREMENT,
    message_creator int REFERENCES user_info(id),
    message TEXT,
    create_date timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE message_recipient
(
    id int PRIMARY KEY AUTO_INCREMENT,
    receiver_id int REFERENCES user_info(id),
    message_id int REFERENCES messages(id),
    is_read BOOLEAN NOT NULL DEFAULT 0
)


delimiter //
CREATE PROCEDURE sp_get_discussion(IN user_id INT)
BEGIN
	SELECT MAX(M.id) AS mid FROM message AS M
	INNER JOIN message_recipient AS MR
	ON M.id = MR.message_id
    WHERE M.message_creator = user_id OR MR.receiver_id = user_id
	GROUP BY M.message_creator, MR.receiver_id
	ORDER BY mid DESC;
END //


CREATE TABLE reply
(
    id int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    message_id int NOT NULL REFERENCES message(id),
    message_replied int NOT NULL REFERENCES message(id)
)

